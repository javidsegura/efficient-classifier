2025-06-02 10:39:20,594 - my_logger - INFO - Pipeline runner started at 2025-06-02 10:39:20
2025-06-02 10:39:21,714 - my_logger - INFO - 'dataset' returned: ('X_train: (120, 5)', 'X_val: (15, 5)', 'X_test: (15, 5)')
2025-06-02 10:39:25,672 - my_logger - INFO - 'data_preprocessing' returned: {'not_baseline': {'abc': 'Handled missing values : No missing values found in the dataset; Duplicates analyzed : There are 0 duplicates in the dataset; Outliers detected by percentile : None; Features scaled with robust : Successfully scaled 5 features. Plotted distributions for the first 5 features.\nTo check the results run:\n your_pipeline.dataset.X_train.head(); Class imbalance: Successfully balanced classes via SMOTE. Started with a 0.90:1 ratio; now 1:1.', 'feed_forward_neural_network': 'Handled missing values : No missing values found in the dataset; Duplicates analyzed : There are 0 duplicates in the dataset; Outliers detected by percentile : None; Features scaled with robust : Successfully scaled 5 features. Plotted distributions for the first 5 features.\nTo check the results run:\n your_pipeline.dataset.X_train.head(); Class imbalance: Successfully balanced classes via SMOTE. Started with a 0.90:1 ratio; now 1:1.', 'tree_based': 'Handled missing values : No missing values found in the dataset; Duplicates analyzed : There are 0 duplicates in the dataset; Outliers detected by percentile : None; Features scaled with no_scaler : No scaling performed; Class imbalance: Successfully balanced classes via SMOTE. Started with a 0.90:1 ratio; now 1:1.', 'ensembled': 'Handled missing values : No missing values found in the dataset; Duplicates analyzed : There are 0 duplicates in the dataset; Outliers detected by percentile : None; Features scaled with robust : Successfully scaled 5 features. Plotted distributions for the first 5 features.\nTo check the results run:\n your_pipeline.dataset.X_train.head(); Class imbalance: Successfully balanced classes via SMOTE. Started with a 0.90:1 ratio; now 1:1.'}, 'baseline': {'baselines': 'Handled missing values : No missing values found in the dataset; Duplicates analyzed : There are 0 duplicates in the dataset; Outliers detected by percentile : None; Features scaled with robust : Successfully scaled 5 features. Plotted distributions for the first 5 features.\nTo check the results run:\n your_pipeline.dataset.X_train.head(); Class imbalance: Successfully balanced classes via SMOTE. Started with a 0.90:1 ratio; now 1:1.'}}
2025-06-02 10:39:26,393 - my_logger - INFO - 'feature_analysis' returned: {'feature_transformation_results': None, 'manual_feature_selection_results': {'MutualInformation': 'Threshold: 0.2, Delete features: True', 'LowVariances': 'Threshold: 0.01, Delete features: True', 'VIF': 'Threshold: 10, Delete features: True', 'PCA': 'Threshold: 0.95, Delete features: True'}, 'automatic_feature_selection_results': {'L1': {'predictivePowerFeatures': None, 'excludedFeatures': None, 'deletesFeatures': True}, 'Boruta': {'selected_features': {'SepalLengthCm', 'PetalLengthCm', 'Id'}, 'excludedFeatures': set(), 'deletesFeatures': True}}}
2025-06-02 10:41:17,681 - my_logger - INFO - 'modelling' returned: {'pre_tuning_runner': {'metrics_df': {'id': {0: 'f66538a146f448787aeedb6105e0d2f6fb741068590fc39156493fbf84d07585', 1: '2be375fe77dcbba67fa61969ade6892a41218f54b30113ca70ad720bc9c9f321'}, 'timeStamp': {0: '2025-06-02 10:39:47', 1: '2025-06-02 10:39:47'}, 'comments': {0: 'A VERY GREAT COMMENT, I CAN TELL YOU THAT', 1: 'A VERY GREAT COMMENT, I CAN TELL YOU THAT'}, 'modelName': {0: 'Logistic Regression (baseline)', 1: 'Majority Class (baseline)'}, 'currentPhase': {0: 'pre', 1: 'pre'}, 'features_used': {0: ['Id', 'SepalLengthCm', 'PetalLengthCm'], 1: ['Id', 'SepalLengthCm', 'PetalLengthCm']}, 'hyperParameters': {0: "{'C': 1.0, 'class_weight': None, 'dual': False, 'fit_intercept': True, 'intercept_scaling': 1, 'l1_ratio': None, 'max_iter': 100, 'multi_class': 'deprecated', 'n_jobs': None, 'penalty': 'l2', 'random_state': None, 'solver': 'lbfgs', 'tol': 0.0001, 'verbose': 0, 'warm_start': False}", 1: '{}'}, 'timeToFit': {0: 0.01986408233642578, 1: 0.0022377967834472656}, 'timeToPredict': {0: 0.0074880123138427734, 1: 5.1021575927734375e-05}, 'accuracy_val': {0: 0.9333333333333333, 1: 0.4}, 'accuracy_test': {0: -1, 1: -1}, 'precision_val': {0: 0.9428571428571428, 1: 0.16000000000000003}, 'precision_test': {0: -1, 1: -1}, 'recall_val': {0: 0.9333333333333333, 1: 0.4}, 'recall_test': {0: -1, 1: -1}, 'f1-score_val': {0: 0.9311355311355312, 1: 0.22857142857142856}, 'f1-score_test': {0: -1, 1: -1}, 'kappa_val': {0: 0.8972602739726028, 1: 0.0}, 'kappa_test': {0: -1, 1: -1}, 'weightedaccuracy_val': {0: -1, 1: -1}, 'weightedaccuracy_test': {0: -1, 1: -1}}, 'residuals': {'abc': Series([], dtype: int64), 'feed_forward_neural_network': 71    1
58    1
84    1
89    1
70    1
dtype: int64, 'tree_based': Series([], dtype: int64), 'ensembled': 106    2
dtype: int64, 'baselines': 139    2
106    2
104    2
4      0
43     0
24     0
6      0
120    2
8      0
dtype: int64}, 'confusion_matrices': {'K-Nearest Neighbors': {'absolute': array([[5, 0, 0],
       [0, 6, 0],
       [0, 1, 3]]), 'relative': array([[100.,   0.,   0.],
       [  0., 100.,   0.],
       [  0.,  25.,  75.]])}, 'AdaBoost': {'absolute': array([[5, 0, 0],
       [0, 6, 0],
       [0, 0, 4]]), 'relative': array([[100.,   0.,   0.],
       [  0., 100.,   0.],
       [  0.,   0., 100.]])}, 'Feed Forward Neural Network': {'absolute': array([[5, 0, 0],
       [0, 1, 5],
       [0, 0, 4]]), 'relative': array([[100.        ,   0.        ,   0.        ],
       [  0.        ,  16.66666667,  83.33333333],
       [  0.        ,   0.        , 100.        ]])}, 'Decision Tree': {'absolute': array([[5, 0, 0],
       [0, 6, 0],
       [0, 0, 4]]), 'relative': array([[100.,   0.,   0.],
       [  0., 100.,   0.],
       [  0.,   0., 100.]])}, 'Random Forest': {'absolute': array([[5, 0, 0],
       [0, 6, 0],
       [0, 1, 3]]), 'relative': array([[100.,   0.,   0.],
       [  0., 100.,   0.],
       [  0.,  25.,  75.]])}, 'Logistic Regression (baseline)': {'absolute': array([[5, 0, 0],
       [0, 6, 0],
       [0, 1, 3]]), 'relative': array([[100.,   0.,   0.],
       [  0., 100.,   0.],
       [  0.,  25.,  75.]])}, 'Majority Class (baseline)': {'absolute': array([[0, 5, 0],
       [0, 6, 0],
       [0, 4, 0]]), 'relative': array([[  0., 100.,   0.],
       [  0., 100.,   0.],
       [  0., 100.,   0.]])}}}, 'in_tuning_runner': {'metrics_df': {'id': {0: '45b3bfa0b92ddd61a36d6a67cb35881822764e2eb589bf12702bccc592d1d6cb', 1: 'c56014914deb14b92d5094cb9f1ca1b0d85aba1513632404b9bdb73cf19f3a0d'}, 'timeStamp': {0: '2025-06-02 10:40:18', 1: '2025-06-02 10:40:18'}, 'comments': {0: 'A VERY GREAT COMMENT, I CAN TELL YOU THAT', 1: 'A VERY GREAT COMMENT, I CAN TELL YOU THAT'}, 'modelName': {0: 'Random Forest', 1: 'AdaBoost'}, 'currentPhase': {0: 'in', 1: 'in'}, 'features_used': {0: ['Id', 'SepalLengthCm', 'PetalLengthCm'], 1: ['Id', 'SepalLengthCm', 'PetalLengthCm']}, 'hyperParameters': {0: "{'bootstrap': True, 'ccp_alpha': 0.0, 'class_weight': None, 'criterion': 'gini', 'max_depth': 20, 'max_features': 'sqrt', 'max_leaf_nodes': None, 'max_samples': None, 'min_impurity_decrease': 0.0, 'min_samples_leaf': 4, 'min_samples_split': 10, 'min_weight_fraction_leaf': 0.0, 'monotonic_cst': None, 'n_estimators': 100, 'n_jobs': None, 'oob_score': False, 'random_state': None, 'verbose': 0, 'warm_start': False}", 1: "{'algorithm': 'deprecated', 'estimator': None, 'learning_rate': 0.2, 'n_estimators': 200, 'random_state': None}"}, 'timeToFit': {0: 8.028805017471313, 1: 10.726368188858032}, 'timeToPredict': {0: 0.014238119125366211, 1: 0.03886294364929199}, 'accuracy_val': {0: 0.9333333333333333, 1: 1.0}, 'accuracy_test': {0: -1, 1: -1}, 'precision_val': {0: 0.9428571428571428, 1: 1.0}, 'precision_test': {0: -1, 1: -1}, 'recall_val': {0: 0.9333333333333333, 1: 1.0}, 'recall_test': {0: -1, 1: -1}, 'f1-score_val': {0: 0.9311355311355312, 1: 1.0}, 'f1-score_test': {0: -1, 1: -1}, 'kappa_val': {0: 0.8972602739726028, 1: 1.0}, 'kappa_test': {0: -1, 1: -1}, 'weightedaccuracy_val': {0: -1, 1: -1}, 'weightedaccuracy_test': {0: -1, 1: -1}}, 'residuals': {'abc': Series([], dtype: int64), 'feed_forward_neural_network': 106    2
58     1
70     1
dtype: int64, 'tree_based': 106    2
dtype: int64, 'ensembled': 106    2
dtype: int64}, 'confusion_matrices': {'K-Nearest Neighbors': {'absolute': array([[5, 0, 0],
       [0, 6, 0],
       [0, 1, 3]]), 'relative': array([[100.,   0.,   0.],
       [  0., 100.,   0.],
       [  0.,  25.,  75.]])}, 'AdaBoost': {'absolute': array([[5, 0, 0],
       [0, 6, 0],
       [0, 0, 4]]), 'relative': array([[100.,   0.,   0.],
       [  0., 100.,   0.],
       [  0.,   0., 100.]])}, 'Feed Forward Neural Network': {'absolute': array([[5, 0, 0],
       [2, 4, 0],
       [0, 1, 3]]), 'relative': array([[100.        ,   0.        ,   0.        ],
       [ 33.33333333,  66.66666667,   0.        ],
       [  0.        ,  25.        ,  75.        ]])}, 'Decision Tree': {'absolute': array([[5, 0, 0],
       [0, 6, 0],
       [0, 1, 3]]), 'relative': array([[100.,   0.,   0.],
       [  0., 100.,   0.],
       [  0.,  25.,  75.]])}, 'Random Forest': {'absolute': array([[5, 0, 0],
       [0, 6, 0],
       [0, 1, 3]]), 'relative': array([[100.,   0.,   0.],
       [  0., 100.,   0.],
       [  0.,  25.,  75.]])}}}, 'post_tuning_runner': ('AdaBoost', 1.0, {'metrics_df': {'id': {0: '52c35074843cef310c42707c00fbfc8bf9174434352d1d6426e94038af4b2d14'}, 'timeStamp': {0: '2025-06-02 10:41:14'}, 'comments': {0: 'A VERY GREAT COMMENT, I CAN TELL YOU THAT'}, 'modelName': {0: 'Majority Class (baseline)'}, 'currentPhase': {0: 'post'}, 'features_used': {0: ['Id', 'SepalLengthCm', 'PetalLengthCm']}, 'hyperParameters': {0: '{}'}, 'timeToFit': {0: 0.0022270679473876953}, 'timeToPredict': {0: 8.821487426757812e-06}, 'accuracy_test': {0: 0.4}, 'accuracy_val': {0: -1}, 'precision_test': {0: 0.16000000000000003}, 'precision_val': {0: -1}, 'recall_test': {0: 0.4}, 'recall_val': {0: -1}, 'f1-score_test': {0: 0.22857142857142856}, 'f1-score_val': {0: -1}, 'kappa_test': {0: 0.0}, 'kappa_val': {0: -1}, 'weightedaccuracy_test': {0: -1}, 'weightedaccuracy_val': {0: -1}}, 'residuals': {'abc': Series([], dtype: int64), 'baselines': 117    2
9      0
127    2
147    2
122    2
16     0
108    2
46     0
124    2
dtype: int64}, 'confusion_matrices': {'AdaBoost': {'absolute': array([[3, 0, 0],
       [0, 6, 0],
       [0, 0, 6]]), 'relative': array([[100.,   0.,   0.],
       [  0., 100.,   0.],
       [  0.,   0., 100.]])}, 'Logistic Regression (baseline)': {'absolute': array([[3, 0, 0],
       [0, 6, 0],
       [0, 0, 6]]), 'relative': array([[100.,   0.,   0.],
       [  0., 100.,   0.],
       [  0.,   0., 100.]])}, 'Majority Class (baseline)': {'absolute': array([[0, 3, 0],
       [0, 6, 0],
       [0, 6, 0]]), 'relative': array([[  0., 100.,   0.],
       [  0., 100.,   0.],
       [  0., 100.,   0.]])}}})}
